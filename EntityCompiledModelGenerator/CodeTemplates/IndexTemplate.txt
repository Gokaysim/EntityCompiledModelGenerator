using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace {Namespace}.{EntityClassName}Classes
{{
  public class {ClassName} : IIndex
  {{
  
    private static {ClassName} _instance;
    
    public static {ClassName} GetInstance()
    {{
        if(_instance==null)
        {{
            _instance = new {ClassName}();
        }}
        return _instance;
    }}
    
    private IEnumerable<IAnnotation> annotations; 

    
    public IAnnotation FindAnnotation(string name)
    {{
      return GetAnnotations().FirstOrDefault(p => p.Name == name);
    }}

    public IEnumerable<IAnnotation> GetAnnotations()
    {{
        if(annotations==null)
        {{
            annotations={Annotations:annotationlist:\t\t\t\t};            
        }}
        return annotations;
    }}

    public object this[string name] => this.FindAnnotation(name)?.Value;

    private IReadOnlyList<IProperty> properties;
    public IReadOnlyList<IProperty> Properties
    {{
        get{{
            if(properties==null)
            {{    
                properties = {Properties:propertylist:\t\t\t\t};
            }}
            return properties;
        }}
    }}
    public bool IsUnique => {IsUnique};
    public IEntityType DeclaringEntityType => {DeclaringEntityType}.GetInstance();
  }}
}}