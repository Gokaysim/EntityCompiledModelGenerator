using System;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using EntityCompiledModelGenerator;
using {ClassNamespace};

namespace {Namespace}.{EntityClassName}Classes
{{
    public class {ClassName}:IProperty
    {{
        private static {ClassName} _instance;
        public static {ClassName} GetInstance()
        {{
            if(_instance==null)
            {{
                _instance =  new {ClassName}();
            }}
            return _instance;
        }}
        
        private bool _isShadowProperty = {IsShadowProperty:true|false};
        private bool _isShadowProperty1 = {IsShadowProperty1:true|false};
        
        private IEnumerable<IAnnotation> _annotations;
        private IEnumerable<IAnnotation> Annotations
        {{
            get
            {{
                if (_annotations == null)
                {{
                    _annotations = new List<IAnnotation>
                    {{
                        {Annotations:list:new Annotation("{Name}","{Value}")|,\n\t\t\t\t\t\t |,\n\t\t\t\t\t\t }
                    }};
                }}
                return _annotations;
            }}
        }}
        
        public {ClassName} ()
        {{
        }}
        public IAnnotation FindAnnotation(string name)
        {{
            return Annotations.FirstOrDefault(p=>p.Name == name);
        }}

        public IEnumerable<IAnnotation> GetAnnotations()
        {{
            return Annotations;
        }}

        public object this[string name] => FindAnnotation(name);

        public string Name =>"{Name}";
        public ITypeBase DeclaringType => {EntityClassName}EntityType.GetInstance();

        Type IProperty.ClrType  
        {{
           get{{
               if(_clrType1==null)
               {{
                   _clrType1 = {PropertyClrType1FullName};
               }}
               return _clrType1;
           }}
       }}

        bool IProperty.IsShadowProperty => _isShadowProperty1;

        public IEntityType DeclaringEntityType => {EntityClassName}EntityType.GetInstance();
        public bool IsNullable => {IsNullable:true|false};
        public PropertySaveBehavior BeforeSaveBehavior => PropertySaveBehavior.{BeforeSaveBehavior};
        public PropertySaveBehavior AfterSaveBehavior => PropertySaveBehavior.{AfterSaveBehavior};
        public bool IsReadOnlyBeforeSave =>{IsReadOnlyBeforeSave:true|false};
        public bool IsReadOnlyAfterSave =>{IsReadOnlyAfterSave:true|false};
        public bool IsStoreGeneratedAlways =>{IsStoreGeneratedAlways:true|false};
        public ValueGenerated ValueGenerated =>ValueGenerated.{ValueGenerated};
        public bool IsConcurrencyToken =>{IsConcurrencyToken:true|false};


        private Type _clrType;
        private Type _clrType1;
        
        Type IPropertyBase.ClrType{{
            get{{
                if(_clrType==null)
                {{
                    _clrType = {PropertyClrTypeFullName};
                }}
                return _clrType;
            }}
        }}
        
        private PropertyInfo _propertyInfo;
        public PropertyInfo PropertyInfo {{
            get{{
                if(_propertyInfo==null)
                {{
                    _propertyInfo = _clrType.GetProperty(this.Name);
                }}
                return _propertyInfo;
            }}
        }}
        private FieldInfo _fieldInfo;
        public FieldInfo FieldInfo {{
            get{{
                if(_fieldInfo==null)
                {{
                    _fieldInfo = _clrType.GetField(this.Name);
                }}
                return _fieldInfo;
            }}
        }}

        bool IPropertyBase.IsShadowProperty => _isShadowProperty;
    }}
}}

